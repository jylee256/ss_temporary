diff --git a/index.html b/index.html
index e0e6344..896db7d 100644
--- a/index.html
+++ b/index.html
@@ -110,6 +110,7 @@
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
   <script src="js/appcontroller.js"></script>
   <script src="js/call.js"></script>
+  <script src="js/connection.js"></script>
   <script src="js/infobox.js"></script>
   <script src="js/util.js"></script>
   <script>
diff --git a/js/appcontroller.js b/js/appcontroller.js
index 6cc9a3f..18672a0 100644
--- a/js/appcontroller.js
+++ b/js/appcontroller.js
@@ -20,7 +20,7 @@ AppController.prototype.init = function() {
     }
 
     this.infoBox_ = new InfoBox();
-    this.call_ = new Call();
+    this.call_ = new Call(this);
 
     this.userName = document.querySelector("#userName");
     this.createButton = document.querySelector('#createButton');
@@ -55,6 +55,8 @@ AppController.prototype.init = function() {
 
     this.userCount = 0;
     this.users = [];
+    this.firstUserSnapshot = true;
+    this.isHost = false;
     this.db = firebase.firestore();
     this.show_(roomSelectionDiv);
 }
@@ -71,7 +73,7 @@ AppController.prototype.createRandomRoom = async function() {
     var roomNumber = randomNumber(9);
     console.log(`randomNumber is ${roomNumber}`);
 
-    this.isCaller = true; /* TODO: isCaller setting time */
+    this.isHost = true; /* TODO: isHost setting time */
     this.targetRoom.value = roomNumber;
     this.checkTargetRoom();
     this.targetRoom.disabled = true;
@@ -89,7 +91,7 @@ AppController.prototype.joinRoom = async function() {
     this.roomRef = await this.db.collection('rooms').doc(this.roomId);
     const roomSnapshot = await this.roomRef.get();
 
-    if (this.isCaller) {
+    if (this.isHost) {
         if (roomSnapshot.exists) {
             console.log(`Room #${this.roomId} is already created. Choose another room number`);
             this.infoBox_.roomExistErrorMessage(this.roomId);
@@ -146,13 +148,13 @@ AppController.prototype.hangup = async function() {
     this.joinButton.disabled = false;
     this.disconnectButton.disabled = true;
 
-    await this.resource_free();
+    //await this.resource_free();
 
     this.hide_(mediaOptionDiv);
     this.hideMeetingRoom();
     this.showLoginMenu();
 }
-
+/*
 AppController.prototype.callee_free = async function () {
     if (!this.calleeCandidatesCollection) {
         return;
@@ -174,7 +176,7 @@ AppController.prototype.caller_free = function () {
         return;
     }
 
-    /* TBD : it should be fixed later */
+    // TBD : it should be fixed later 
     this.userCollection.get().then(res => {
         res.forEach(element => {
             element.ref.delete();
@@ -186,7 +188,6 @@ AppController.prototype.caller_free = function () {
             element.ref.delete();
         });
     })
-    /* */
 
     this.callerCandidatesCollection.get().then(res => {
         res.forEach(element => {
@@ -215,7 +216,7 @@ AppController.prototype.resource_free = async function () {
         this.participants.length = 0;
     }
     console.log('resource_free done');
-}
+}*/
 
 
 AppController.prototype.onConnectDevice = async function() {
@@ -258,23 +259,34 @@ AppController.prototype.prepareDialog = function(data) {
 
 AppController.prototype.addUser = async function() {
     this.userCollection = this.roomRef.collection('users');
-    this.userRef = this.userCollection.doc(this.user);
-    this.userRef.set({name: this.user});
-    var res = await this.userCollection.get();
-    if (res.size == 1) {
-        console.log(`users collection size is ${res.size}`)
-    }
 
-    this.userCollection.onSnapshot(snapshot => {
-        snapshot.docChanges().forEach(change => {
+    this.userCollection.onSnapshot(async snapshot => {
+        var isCaller;
+        if (this.firstUserSnapshot) { isCaller = true; }
+        else { isCaller = false; }
+        snapshot.docChanges().forEach(async change => {
             if (change.type === 'added') {
                 let data = change.doc.data();
                 this.users[this.userCount++] = data.name;
                 console.log(`user Added!! name is : ${data.name}, current users are ${this.userCount}`)
-                //this.call_.addPeerConnection(this.user, data.name);
+                if (this.user != data.name) {
+                    await this.call_.addPeerConnection(isCaller, this.user, data.name);
+                }
+            } else if (change.type === 'removed') {
+                /* TBD */
             }
         })
+        this.firstUserSnapshot = false;
+        console.log('firstUserSnapshot set to ' + this.firstUserSnapshot)
     })
+
+    this.userRef = this.userCollection.doc(this.user);
+    this.userRef.set({name: this.user});
+    console.log('set ' + this.user)
+    var res = await this.userCollection.get();
+    if (res.size == 1) {
+        console.log(`users collection size is ${res.size}`)
+    }
 }
 
 AppController.prototype.addControlMediaStreamsListener = function() {
@@ -307,70 +319,11 @@ AppController.prototype.addControlMediaStreamsListener = function() {
 };
 
 AppController.prototype.onMeetNow = async function() {
-    this.callerCandidatesCollection = this.roomRef.collection('callerCandidates');
-    this.calleeCandidatesCollection = this.roomRef.collection('calleeCandidates');
     this.addControlMediaStreamsListener();
     await this.addUser(); /* TBD: it will be merged with addControlMedia~~ soon */
-
-    this.call_.onAddCallCandidate = function(isCaller, candidate) {
-        if (isCaller) {
-            this.callerCandidatesCollection.add(candidate);
-        } else {
-            this.calleeCandidatesCollection.add(candidate);
-        }
-    }.bind(this);
-
-    this.call_.startConnection(this.isCaller);
-
-    if (this.isCaller) {
-        const roomWithOffer = await this.call_.setLocalDescription(this.isCaller);
-        await this.roomRef.set(roomWithOffer);
-
-        this.roomId = this.roomRef.id;
-        console.log(`New room created with SDP offer. Room ID: ${this.roomRef.id}`);
- 
-        this.roomRef.onSnapshot(async snapshot => {
-            const data = snapshot.data();
-            await this.call_.setRemoteDescription(this.isCaller, data);
-        });
-
-        this.calleeCandidatesCollection.onSnapshot(snapshot => {
-            snapshot.docChanges().forEach(async change => {
-                if (change.type == 'added') {
-                    let data = change.doc.data();
-                    await this.call_.addIceCandidate(data);
-                }
-            });
-        })
-    } else {
-        const roomSnapshot = await this.roomRef.get();
-        console.log('Got room:', roomSnapshot.exists);
-
-         if (roomSnapshot.exists) {
-            const data = roomSnapshot.data();
-            console.log('Got offer:', data.offer);
-            await this.call_.setRemoteDescription(this.isCaller, data);
-
-            const roomWithAnswer = await this.call_.setLocalDescription(this.isCaller);
-            await this.roomRef.update(roomWithAnswer);
-            
-            this.callerCandidatesCollection.onSnapshot(snapshot => {
-                snapshot.docChanges().forEach(async change => {
-                    if (change.type === 'added') {
-                        let data = change.doc.data();
-                        console.log(`Got new remote ICE candidate: ${JSON.stringify(data)}`);
-                        await this.call_.addIceCandidate(data);
-                    }
-                });
-            });
-        } else {
-            this.infoBox_.loginErrorMessage(this.roomId);
-            return;
-        }
-    }
     
     this.hide_(previewDiv);
-    this.infoBox_.loginRoomMessage(this.isCaller, this.roomId);
+    this.infoBox_.loginRoomMessage(this.isHost, this.roomId);
     this.showMeetingRoom();
 }
 
@@ -411,7 +364,7 @@ AppController.prototype.showLoginMenu = function () {
     this.joinButton.disabled = false;
     this.targetRoom.disabled = false;
     this.targetRoom.value = "";
-    this.isCaller = false;
+    this.isHost = false;
     this.userCount = 0;
     console.log("showLoginMenu")
 }
diff --git a/js/call.js b/js/call.js
index 4bb0db5..69db3f3 100644
--- a/js/call.js
+++ b/js/call.js
@@ -1,40 +1,15 @@
 'use strict';
 
-var Call = function () {
+var Call = function (appController) {
     console.log("new Call!");
 
     this.localVideo = document.querySelector('#localvideo');
-    this.remoteVideo = document.querySelector('#remotevideo');
+    //this.remoteVideo = document.querySelector('#remotevideo');
     this.localMediaOption = {video: true, audio: true};
 
-    this.configuration = {
-        iceServers: [
-            {
-                urls: [
-                    "stun:stun.l.google.com:19302",
-                    "stun:stun1.l.google.com:19302",
-                    "stun:stun2.l.google.com:19302",
-                    "stun:stun3.l.google.com:19302",
-                    "stun:stun4.l.google.com:19302",
-                    "stun:stun.ekiga.net",
-                    "stun:stun.ideasip.com",
-                    "stun:stun.rixtelecom.se",
-                    "stun:stun.schlund.de",
-                    "stun:stun.stunprotocol.org:3478",
-                    "stun:stun.voiparound.com",
-                    "stun:stun.voipbuster.com",
-                    "stun:stun.voipstunt.com",
-                    "stun:stun.voxgratia.org"
-                ],
-            },
-        ],
-        iceCandidatePoolSize: 10,
-    };
-
-    this.remoteStream = new MediaStream();
-    this.onAddCallCandidate = null;
-    this.videoSenders = [];
-    this.audioSenders = [];
+    this.appController_ = appController;
+    this.pc_ = [];
+    this.connectionCnt = 0;
 }
 
 Call.prototype.onConnectDevice = function() {
@@ -86,7 +61,7 @@ Call.prototype.gotUserMediaStream = function(streams) {
 
     this.localStream = streams; // make stream available to console
     this.localVideo.srcObject = streams;
-    this.remoteVideo.srcObject = this.remoteStream;
+    //this.remoteVideo.srcObject = this.remoteStream;
 
     return true;
 }
@@ -98,7 +73,7 @@ Call.prototype.gotDisplayMediaStream = function(streams) {
     
     this.localStream = streams; // make stream available to console
     this.localVideo.srcObject = streams;
-    this.remoteVideo.srcObject = this.remoteStream;
+    //this.remoteVideo.srcObject = this.remoteStream;
     this.localStream.getVideoTracks()[0].addEventListener('ended', () => {
         /*shareButton.disabled = false;*/
         this.onConnectDevice();
@@ -106,100 +81,23 @@ Call.prototype.gotDisplayMediaStream = function(streams) {
     return true;
 }
 
-Call.prototype.startConnection = function(isCaller) {
-    console.log('Create PeerConnection with configuration: ', this.configuration);
-    
-    this.peerConnection = new RTCPeerConnection(this.configuration);
-    this.registerPeerConnectionListeners();
-    
-    this.localStream.getVideoTracks().forEach(track =>
-        this.videoSenders.push(this.peerConnection.addTrack(track, this.localStream)));
-    this.localStream.getAudioTracks().forEach(track =>
-        this.audioSenders.push(this.peerConnection.addTrack(track, this.localStream)));
-
-    this.peerConnection.addEventListener('icecandidate', event => {
-        if (!event.candidate) {
-            console.log('Got final candidate!');
-            return;
-        }
-        console.log('Got candidate: ', event.candidate);
-        this.onAddCallCandidate(isCaller, event.candidate.toJSON());
-    });
+Call.prototype.addPeerConnection = async function (isCaller, me, peer) {
+    var connectionName = `pc_${me}-${peer}`;
 
-    this.peerConnection.addEventListener('track', event => {
-        console.log('Got remote track:', event.streams[0]);
-        event.streams[0].getTracks().forEach(track => {
-            console.log('Add a track to the remoteStream:', track);
-            this.remoteStream.addTrack(track);
-        });
-    });
-}
+    /*if (this.pc_.findIndex(pc => pc.pcName === connectionName) != -1 ) {
+        console.log(`connection of ${connectionName} is already exists`);
+        return;
+    }*/
 
-Call.prototype.setLocalDescription = async function (isCaller) {
+    var pcIndex = this.connectionCnt++;
     if (isCaller) {
-        const offer = await this.peerConnection.createOffer();
-        await this.peerConnection.setLocalDescription(offer);
-        console.log('Created offer: ', offer);
-
-        return {
-            'offer': {
-                type: offer.type,
-                sdp: offer.sdp,
-            },
-        };
+        this.pc_[pcIndex] = new Connection(me, peer, this);
     } else {
-        const answer = await this.peerConnection.createAnswer();
-        console.log('Created answer:', answer);
-        await this.peerConnection.setLocalDescription(answer);
-
-        return {
-            answer: {
-                type: answer.type,
-                sdp: answer.sdp,
-            },
-        };
+        this.pc_[pcIndex] = new Connection(peer, me, this);
     }
+    this.pc_[pcIndex].initConnection(connectionName);
 
-}
-
-Call.prototype.setRemoteDescription = async function (isCaller, data) {
-    if (isCaller) {
-        if (!this.peerConnection.currentRemoteDescription && data && data.answer) {
-            console.log('Got remote description: ', data.answer);
-            await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.answer));
-        }
-    } else {
-        if (!this.peerConnection.currentRemoteDescription && data && data.offer) {
-            await this.peerConnection.setRemoteDescription(new RTCSessionDescription(data.offer));
-        }
-    }
-}
-
-Call.prototype.addIceCandidate = async function (data) {
-    await this.peerConnection.addIceCandidate(new RTCIceCandidate(data));
-}
-
-Call.prototype.registerPeerConnectionListeners = function() {
-    this.peerConnection.addEventListener('icegatheringstatechange', () => {
-        console.log(
-          `ICE gathering state changed: ${this.peerConnection.iceGatheringState}`);
-    });
-  
-    this.peerConnection.addEventListener('connectionstatechange', () => {
-        console.log(`Connection state change: ${this.peerConnection.connectionState}`);
-        if (this.peerConnection.connectionState == "disconnected") {
-            //noticeInfo.innerHTML = 'Peer disconnected!! '
-        }
-    });
-  
-    this.peerConnection.addEventListener('signalingstatechange', () => {
-        console.log(`Signaling state change: ${this.peerConnection.signalingState}`);
-    });
-  
-    this.peerConnection.addEventListener('iceconnectionstatechange ', () => {
-        console.log(
-          `ICE connection state change: ${this.peerConnection.iceConnectionState}`);
-    });
+    await this.pc_[pcIndex].startConnection(isCaller, me);
 }
 
 Call.prototype.hangup = function() {
@@ -211,14 +109,11 @@ Call.prototype.hangup = function() {
             track.stop();
         });
     }
-    if (this.remoteStream && this.remoteStream.getTracks()) {
-        console.log("Stop remote tracks. Size: " + this.remoteStream.getTracks().length);
-        this.remoteStream.getTracks().forEach(track => track.stop());
-        this.remoteStream = new MediaStream();
-    }
-    if (this.peerConnection) {
-        this.peerConnection.close();
-    }
+    
     this.localVideo.srcObject = null;
-    this.remoteVideo.srcObject = null;
+
+    for (var i=0; i<this.connectionCnt; i++) {
+        this.pc_[i].hangup();
+        delete this.pc_[i];
+    }
 }
diff --git a/js/infobox.js b/js/infobox.js
index e39619d..c2058ba 100644
--- a/js/infobox.js
+++ b/js/infobox.js
@@ -14,10 +14,10 @@ InfoBox.prototype.resetMessage = function () {
     this.noticeInfo.innerHTML = '';
 }
 
-InfoBox.prototype.loginRoomMessage = function (isCaller, roomId) {
+InfoBox.prototype.loginRoomMessage = function (isHost, roomId) {
     this.normal_(this.roomInfo);
 
-    if (isCaller) {
+    if (isHost) {
         this.roomInfo.innerHTML = `Current room is ${roomId} - You are a Host!`;
     } else {
         this.roomInfo.innerHTML = `You joined this room ${roomId} - You are an Attendee!`;
